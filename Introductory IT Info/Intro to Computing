Before diving deeper into IT help desk info, it’s important to understand the basics of how computers actually work.

Binary and How It Works?

Computers don’t understand human language. They use binary, which is just 0s and 1s.
A 0 means “off”, or “false”, and that means no electrical signal. 1 means “on”, or “true”, and that a signal is present.
Everything a computer does, such as text, images, music, and programs, is ultimately represented in binary. 
For a very simple example, the number 5 in binary is 101. 

Bits and Bytes?

A bit is the smallest piece of data in a computer. It can only be 0 or 1.
A byte is 8 bits. For example, 01010101.
Bytes are used to store small amounts of data.
Common units are kilobyte, or KB,which 1,024 bytes. megabyte, or MB, which is 1,024 KB, and finally gigabyte, or GB, which is 1,024 MB.

Logic Gates?
At the lowest level, computers compute using logic gates which are just simple circuits that take one or two inputs and produce an output. 
For example, there is the AND Gate. Its output is 1 only if both inputs are 1. 
There is also the OR Gate, which outputs 1 if at least one input is 1. 
The NOT Gate is another, as it flips the input (0 → 1, 1 → 0). 
These are just three of many different gates, but these are the most common ones. By combining these gates, you can build adders, calculators, CPUs, and eventually, entire computers.

Registers and Instructions?
Registers are storage locations inside the CPU. They hold data the processor is currently working on. 
Instructions is the CPU following a list of instructions, like “add these two numbers” or “move this value into memory.” 
Together, registers and instructions are the core of how programs run.

Compilers and Abstraction?
Writing instructions directly in binary is terrible. Instead, we use programming languages. 
A compiler takes human-readable code, like C++, Java, or Python, and translates it into machine code for the computer to understand. 
Abstraction essentially means we don’t need to think about the 0s and 1s when writing programs as the higher-level languages lets us focus on solving problems, while the compiler handles the translation. 

Examples of abstraction levels are like this:

Hardware (binary, gates, registers)
Assembly language (low-level instructions like MOV AX, 1)
High-level language (like print("Hello World"))
